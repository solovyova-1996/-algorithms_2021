"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""

from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

# оптимизация функции:
# использовала функцию enumerate(), так как она создает объект-генератор,
# генератор на каждой итерации цикла возвращает кортеж из индекса элемента
# списка и самого элемента и не загружает весь список сразу в память
# так же использовала lc для улучшения читабельности и сокращения кол-ва кода

def func_1_update(nums):
    return [i for i, e in enumerate(nums) if e % 2 == 0]


nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(f'Время выполнения функции: '
      f'{timeit("func_1(nums)", globals=globals(), number=1000000)}')
# Время выполнения функции: 2.1124272
print(f'Время выполнения функции: '
      f'{timeit("func_1_update(nums)", globals=globals(), number=1000000)}')
# Время выполнения функции: 1.8413251999999996